{
  "allOf": [
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-node"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "args": {
            "default": [],
            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array",
              "string"
            ]
          },
          "attachSimplePort": {
            "default": 9229,
            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ]
          },
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "console": {
            "default": "internalConsole",
            "description": "Where to launch the debug target.",
            "enum": [
              "internalConsole",
              "integratedTerminal",
              "externalTerminal"
            ],
            "enumDescriptions": [
              "VS Code Debug Console (which doesn't support to read input from a program)",
              "VS Code's integrated terminal",
              "External terminal that can be configured via user settings"
            ],
            "type": "string"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "experimentalNetworking": {
            "default": "auto",
            "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
            "enum": [
              "auto",
              "on",
              "off"
            ],
            "type": "string"
          },
          "killBehavior": {
            "default": "forceful",
            "enum": [
              "forceful",
              "polite",
              "none"
            ],
            "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "profileStartup": {
            "default": true,
            "description": "If true, will start profiling as soon as the process launches",
            "type": "boolean"
          },
          "program": {
            "default": "",
            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": true,
            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "delay": {
                    "default": 1000,
                    "minimum": 0,
                    "type": "number"
                  },
                  "maxAttempts": {
                    "default": 10,
                    "minimum": 0,
                    "type": "number"
                  }
                },
                "type": "object"
              }
            ]
          },
          "runtimeArgs": {
            "default": [],
            "description": "Optional arguments passed to the runtime executable.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": "array"
          },
          "runtimeExecutable": {
            "default": "node",
            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
            "type": [
              "string",
              "null"
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "runtimeVersion": {
            "default": "default",
            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
            "type": "string"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "stopOnEntry": {
            "default": true,
            "description": "Automatically stop program after launch.",
            "type": [
              "boolean",
              "string"
            ]
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-node"
          },
          "request": {
            "const": "attach"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
            "type": "string"
          },
          "attachExistingChildren": {
            "default": false,
            "description": "Whether to attempt to attach to already-spawned child processes.",
            "type": "boolean"
          },
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "continueOnAttach": {
            "default": true,
            "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
            "type": "boolean"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "port": {
            "default": 9229,
            "description": "Debug port to attach to. Default is 9229.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ],
            "tags": [
              "setup"
            ]
          },
          "processId": {
            "default": "${command:PickProcess}",
            "description": "ID of process to attach to.",
            "type": "string"
          },
          "remoteHostHeader": {
            "description": "Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to 'localhost'. This is useful when the inspector is running behind a proxy that only accept particular Host header.",
            "type": "string"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": true,
            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "delay": {
                    "default": 1000,
                    "minimum": 0,
                    "type": "number"
                  },
                  "maxAttempts": {
                    "default": 10,
                    "minimum": 0,
                    "type": "number"
                  }
                },
                "type": "object"
              }
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "websocketAddress": {
            "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "node"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "args": {
            "default": [],
            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array",
              "string"
            ]
          },
          "attachSimplePort": {
            "default": 9229,
            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ]
          },
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "console": {
            "default": "internalConsole",
            "description": "Where to launch the debug target.",
            "enum": [
              "internalConsole",
              "integratedTerminal",
              "externalTerminal"
            ],
            "enumDescriptions": [
              "VS Code Debug Console (which doesn't support to read input from a program)",
              "VS Code's integrated terminal",
              "External terminal that can be configured via user settings"
            ],
            "type": "string"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "experimentalNetworking": {
            "default": "auto",
            "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
            "enum": [
              "auto",
              "on",
              "off"
            ],
            "type": "string"
          },
          "killBehavior": {
            "default": "forceful",
            "enum": [
              "forceful",
              "polite",
              "none"
            ],
            "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "profileStartup": {
            "default": true,
            "description": "If true, will start profiling as soon as the process launches",
            "type": "boolean"
          },
          "program": {
            "default": "",
            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": true,
            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "delay": {
                    "default": 1000,
                    "minimum": 0,
                    "type": "number"
                  },
                  "maxAttempts": {
                    "default": 10,
                    "minimum": 0,
                    "type": "number"
                  }
                },
                "type": "object"
              }
            ]
          },
          "runtimeArgs": {
            "default": [],
            "description": "Optional arguments passed to the runtime executable.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": "array"
          },
          "runtimeExecutable": {
            "default": "node",
            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
            "type": [
              "string",
              "null"
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "runtimeVersion": {
            "default": "default",
            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
            "type": "string"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "stopOnEntry": {
            "default": true,
            "description": "Automatically stop program after launch.",
            "type": [
              "boolean",
              "string"
            ]
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "node"
          },
          "request": {
            "const": "attach"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
            "type": "string"
          },
          "attachExistingChildren": {
            "default": false,
            "description": "Whether to attempt to attach to already-spawned child processes.",
            "type": "boolean"
          },
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "continueOnAttach": {
            "default": true,
            "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
            "type": "boolean"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "port": {
            "default": 9229,
            "description": "Debug port to attach to. Default is 9229.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ],
            "tags": [
              "setup"
            ]
          },
          "processId": {
            "default": "${command:PickProcess}",
            "description": "ID of process to attach to.",
            "type": "string"
          },
          "remoteHostHeader": {
            "description": "Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to 'localhost'. This is useful when the inspector is running behind a proxy that only accept particular Host header.",
            "type": "string"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": true,
            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "delay": {
                    "default": 1000,
                    "minimum": 0,
                    "type": "number"
                  },
                  "maxAttempts": {
                    "default": 10,
                    "minimum": 0,
                    "type": "number"
                  }
                },
                "type": "object"
              }
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "websocketAddress": {
            "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "node-terminal"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "command": {
            "default": "npm start",
            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
            "tags": [
              "setup"
            ],
            "type": [
              "string",
              "null"
            ]
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-extensionHost"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "args": {
            "default": [
              "--extensionDevelopmentPath=${ZED_WORKTREE_ROOT}"
            ],
            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": "array"
          },
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "debugWebWorkerHost": {
            "default": true,
            "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
            "type": [
              "boolean"
            ]
          },
          "debugWebviews": {
            "default": true,
            "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
            "type": [
              "boolean"
            ]
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "rendererDebugOptions": {
            "default": {
              "webRoot": "${ZED_WORKTREE_ROOT}"
            },
            "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
            "properties": {
              "address": {
                "default": "localhost",
                "description": "IP address or hostname the debugged browser is listening on.",
                "type": "string"
              },
              "browserAttachLocation": {
                "default": null,
                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "enum": [
                      "ui",
                      "workspace"
                    ],
                    "type": "string"
                  }
                ]
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array"
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string"
              },
              "customPropertiesGenerator": {
                "deprecated": true,
                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                "type": "string"
              },
              "disableNetworkCache": {
                "default": true,
                "description": "Controls whether to skip the network cache for each request",
                "type": "boolean"
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean"
              },
              "enableDWARF": {
                "default": true,
                "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                "type": "boolean"
              },
              "inspectUri": {
                "default": null,
                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                "type": [
                  "string",
                  "null"
                ]
              },
              "outFiles": {
                "default": [
                  "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "tags": [
                  "setup"
                ],
                "type": [
                  "array"
                ]
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
              },
              "pathMapping": {
                "default": {},
                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                "type": "object"
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean"
              },
              "perScriptSourcemaps": {
                "default": "auto",
                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                "enum": [
                  "yes",
                  "no",
                  "auto"
                ],
                "type": "string"
              },
              "port": {
                "default": 9229,
                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                "oneOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "pattern": "^\\${.*}$",
                    "type": "string"
                  }
                ],
                "tags": [
                  "setup"
                ]
              },
              "resolveSourceMapLocations": {
                "default": null,
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ]
              },
              "restart": {
                "default": false,
                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                "type": "boolean"
              },
              "server": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "node my-server.js"
                    },
                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                    "properties": {
                      "args": {
                        "default": [],
                        "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "array",
                          "string"
                        ]
                      },
                      "attachSimplePort": {
                        "default": 9229,
                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                        "oneOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "pattern": "^\\${.*}$",
                            "type": "string"
                          }
                        ]
                      },
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "console": {
                        "default": "internalConsole",
                        "description": "Where to launch the debug target.",
                        "enum": [
                          "internalConsole",
                          "integratedTerminal",
                          "externalTerminal"
                        ],
                        "enumDescriptions": [
                          "VS Code Debug Console (which doesn't support to read input from a program)",
                          "VS Code's integrated terminal",
                          "External terminal that can be configured via user settings"
                        ],
                        "type": "string"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "customPropertiesGenerator": {
                        "deprecated": true,
                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${ZED_WORKTREE_ROOT}",
                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                        "tags": [
                          "setup"
                        ],
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "enableDWARF": {
                        "default": true,
                        "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "tags": [
                          "setup"
                        ],
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${ZED_WORKTREE_ROOT}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "experimentalNetworking": {
                        "default": "auto",
                        "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                        "enum": [
                          "auto",
                          "on",
                          "off"
                        ],
                        "type": "string"
                      },
                      "killBehavior": {
                        "default": "forceful",
                        "enum": [
                          "forceful",
                          "polite",
                          "none"
                        ],
                        "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "profileStartup": {
                        "default": true,
                        "description": "If true, will start profiling as soon as the process launches",
                        "type": "boolean"
                      },
                      "program": {
                        "default": "",
                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                        "tags": [
                          "setup"
                        ],
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": true,
                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "delay": {
                                "default": 1000,
                                "minimum": 0,
                                "type": "number"
                              },
                              "maxAttempts": {
                                "default": 10,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "runtimeArgs": {
                        "default": [],
                        "description": "Optional arguments passed to the runtime executable.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": "array"
                      },
                      "runtimeExecutable": {
                        "default": "node",
                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "runtimeVersion": {
                        "default": "default",
                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                        "type": "string"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "${/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                          "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                          "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMapRenames": {
                        "default": true,
                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                        "type": "boolean"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "stopOnEntry": {
                        "default": true,
                        "description": "Automatically stop program after launch.",
                        "type": [
                          "boolean",
                          "string"
                        ]
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations.",
                        "markdownDescription": "Timeouts for several debugger operations.",
                        "properties": {
                          "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                          },
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "npm start"
                    },
                    "description": "JavaScript Debug Terminal",
                    "properties": {
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "command": {
                        "default": "npm start",
                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "customPropertiesGenerator": {
                        "deprecated": true,
                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${ZED_WORKTREE_ROOT}",
                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                        "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                        "tags": [
                          "setup"
                        ],
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "enableDWARF": {
                        "default": true,
                        "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "tags": [
                          "setup"
                        ],
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${ZED_WORKTREE_ROOT}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "${/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                          "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                          "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMapRenames": {
                        "default": true,
                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                        "type": "boolean"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations.",
                        "markdownDescription": "Timeouts for several debugger operations.",
                        "properties": {
                          "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                          },
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ]
              },
              "skipFiles": {
                "default": [
                  "${/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                "type": "array"
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean"
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                  "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                  "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object"
              },
              "sourceMapRenames": {
                "default": true,
                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                "type": "boolean"
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean"
              },
              "targetSelection": {
                "default": "automatic",
                "enum": [
                  "pick",
                  "automatic"
                ],
                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                "type": "string"
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number"
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations.",
                "markdownDescription": "Timeouts for several debugger operations.",
                "properties": {
                  "hoverEvaluation": {
                    "default": 500,
                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                    "type": "number"
                  },
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "url": {
                "default": "http://localhost:8080",
                "description": "Will search for a tab with this exact url and attach to it, if found",
                "tags": [
                  "setup"
                ],
                "type": "string"
              },
              "urlFilter": {
                "default": "",
                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                "type": "string"
              },
              "vueComponentPaths": {
                "default": [
                  "${ZED_WORKTREE_ROOT}/**/*.vue"
                ],
                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                "type": "array"
              },
              "webRoot": {
                "default": "${ZED_WORKTREE_ROOT}",
                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                "tags": [
                  "setup"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeExecutable": {
            "default": "node",
            "markdownDescription": "Absolute path to VS Code.",
            "type": [
              "string",
              "null"
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "testConfiguration": {
            "default": "${ZED_WORKTREE_ROOT}/.vscode-test.js",
            "markdownDescription": "Path to a test configuration file for the [test CLI](https://code.visualstudio.com/api/working-with-extensions/testing-extension#quick-setup-the-test-cli).",
            "type": "string"
          },
          "testConfigurationLabel": {
            "default": "",
            "markdownDescription": "A single configuration to run from the file. If not specified, you may be asked to pick.",
            "type": "string"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "required": []
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "extensionHost"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "args": {
            "default": [
              "--extensionDevelopmentPath=${ZED_WORKTREE_ROOT}"
            ],
            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": "array"
          },
          "autoAttachChildProcesses": {
            "default": true,
            "description": "Attach debugger to new child processes automatically.",
            "type": "boolean"
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "debugWebWorkerHost": {
            "default": true,
            "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
            "type": [
              "boolean"
            ]
          },
          "debugWebviews": {
            "default": true,
            "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
            "type": [
              "boolean"
            ]
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {},
            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
            "tags": [
              "setup"
            ],
            "type": "object"
          },
          "envFile": {
            "default": "${ZED_WORKTREE_ROOT}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "type": "string"
          },
          "localRoot": {
            "default": null,
            "description": "Path to the local directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "nodeVersionHint": {
            "default": 12,
            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
            "minimum": 8,
            "type": "number"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "remoteRoot": {
            "default": null,
            "description": "Absolute path to the remote directory containing the program.",
            "type": [
              "string",
              "null"
            ]
          },
          "rendererDebugOptions": {
            "default": {
              "webRoot": "${ZED_WORKTREE_ROOT}"
            },
            "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
            "properties": {
              "address": {
                "default": "localhost",
                "description": "IP address or hostname the debugged browser is listening on.",
                "type": "string"
              },
              "browserAttachLocation": {
                "default": null,
                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "enum": [
                      "ui",
                      "workspace"
                    ],
                    "type": "string"
                  }
                ]
              },
              "cascadeTerminateToConfigurations": {
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "type": "array"
              },
              "customDescriptionGenerator": {
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                "type": "string"
              },
              "customPropertiesGenerator": {
                "deprecated": true,
                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                "type": "string"
              },
              "disableNetworkCache": {
                "default": true,
                "description": "Controls whether to skip the network cache for each request",
                "type": "boolean"
              },
              "enableContentValidation": {
                "default": true,
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                "type": "boolean"
              },
              "enableDWARF": {
                "default": true,
                "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                "type": "boolean"
              },
              "inspectUri": {
                "default": null,
                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                "type": [
                  "string",
                  "null"
                ]
              },
              "outFiles": {
                "default": [
                  "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                  "!**/node_modules/**"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "tags": [
                  "setup"
                ],
                "type": [
                  "array"
                ]
              },
              "outputCapture": {
                "default": "console",
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
              },
              "pathMapping": {
                "default": {},
                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                "type": "object"
              },
              "pauseForSourceMap": {
                "default": false,
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "type": "boolean"
              },
              "perScriptSourcemaps": {
                "default": "auto",
                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                "enum": [
                  "yes",
                  "no",
                  "auto"
                ],
                "type": "string"
              },
              "port": {
                "default": 9229,
                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                "oneOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "pattern": "^\\${.*}$",
                    "type": "string"
                  }
                ],
                "tags": [
                  "setup"
                ]
              },
              "resolveSourceMapLocations": {
                "default": null,
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "items": {
                  "type": "string"
                },
                "type": [
                  "array",
                  "null"
                ]
              },
              "restart": {
                "default": false,
                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                "type": "boolean"
              },
              "server": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "node my-server.js"
                    },
                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                    "properties": {
                      "args": {
                        "default": [],
                        "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "array",
                          "string"
                        ]
                      },
                      "attachSimplePort": {
                        "default": 9229,
                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                        "oneOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "pattern": "^\\${.*}$",
                            "type": "string"
                          }
                        ]
                      },
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "console": {
                        "default": "internalConsole",
                        "description": "Where to launch the debug target.",
                        "enum": [
                          "internalConsole",
                          "integratedTerminal",
                          "externalTerminal"
                        ],
                        "enumDescriptions": [
                          "VS Code Debug Console (which doesn't support to read input from a program)",
                          "VS Code's integrated terminal",
                          "External terminal that can be configured via user settings"
                        ],
                        "type": "string"
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "customPropertiesGenerator": {
                        "deprecated": true,
                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${ZED_WORKTREE_ROOT}",
                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                        "tags": [
                          "setup"
                        ],
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "enableDWARF": {
                        "default": true,
                        "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "tags": [
                          "setup"
                        ],
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${ZED_WORKTREE_ROOT}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "experimentalNetworking": {
                        "default": "auto",
                        "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                        "enum": [
                          "auto",
                          "on",
                          "off"
                        ],
                        "type": "string"
                      },
                      "killBehavior": {
                        "default": "forceful",
                        "enum": [
                          "forceful",
                          "polite",
                          "none"
                        ],
                        "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "profileStartup": {
                        "default": true,
                        "description": "If true, will start profiling as soon as the process launches",
                        "type": "boolean"
                      },
                      "program": {
                        "default": "",
                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                        "tags": [
                          "setup"
                        ],
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "restart": {
                        "default": true,
                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "delay": {
                                "default": 1000,
                                "minimum": 0,
                                "type": "number"
                              },
                              "maxAttempts": {
                                "default": 10,
                                "minimum": 0,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "runtimeArgs": {
                        "default": [],
                        "description": "Optional arguments passed to the runtime executable.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": "array"
                      },
                      "runtimeExecutable": {
                        "default": "node",
                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "runtimeVersion": {
                        "default": "default",
                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                        "type": "string"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "${/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                          "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                          "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMapRenames": {
                        "default": true,
                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                        "type": "boolean"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "stopOnEntry": {
                        "default": true,
                        "description": "Automatically stop program after launch.",
                        "type": [
                          "boolean",
                          "string"
                        ]
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations.",
                        "markdownDescription": "Timeouts for several debugger operations.",
                        "properties": {
                          "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                          },
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "default": {
                      "program": "npm start"
                    },
                    "description": "JavaScript Debug Terminal",
                    "properties": {
                      "autoAttachChildProcesses": {
                        "default": true,
                        "description": "Attach debugger to new child processes automatically.",
                        "type": "boolean"
                      },
                      "cascadeTerminateToConfigurations": {
                        "default": [],
                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                        "items": {
                          "type": "string",
                          "uniqueItems": true
                        },
                        "type": "array"
                      },
                      "command": {
                        "default": "npm start",
                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "customDescriptionGenerator": {
                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                        "type": "string"
                      },
                      "customPropertiesGenerator": {
                        "deprecated": true,
                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                        "type": "string"
                      },
                      "cwd": {
                        "default": "${ZED_WORKTREE_ROOT}",
                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                        "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                        "tags": [
                          "setup"
                        ],
                        "type": "string"
                      },
                      "enableContentValidation": {
                        "default": true,
                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                        "type": "boolean"
                      },
                      "enableDWARF": {
                        "default": true,
                        "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                        "type": "boolean"
                      },
                      "env": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "default": {},
                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                        "tags": [
                          "setup"
                        ],
                        "type": "object"
                      },
                      "envFile": {
                        "default": "${ZED_WORKTREE_ROOT}/.env",
                        "description": "Absolute path to a file containing environment variable definitions.",
                        "type": "string"
                      },
                      "localRoot": {
                        "default": null,
                        "description": "Path to the local directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodeVersionHint": {
                        "default": 12,
                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                        "minimum": 8,
                        "type": "number"
                      },
                      "outFiles": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                          "!**/node_modules/**"
                        ],
                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                        "items": {
                          "type": "string"
                        },
                        "tags": [
                          "setup"
                        ],
                        "type": [
                          "array"
                        ]
                      },
                      "outputCapture": {
                        "default": "console",
                        "enum": [
                          "console",
                          "std"
                        ],
                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                      },
                      "pauseForSourceMap": {
                        "default": false,
                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                        "type": "boolean"
                      },
                      "remoteRoot": {
                        "default": null,
                        "description": "Absolute path to the remote directory containing the program.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resolveSourceMapLocations": {
                        "default": [
                          "${ZED_WORKTREE_ROOT}/**",
                          "!**/node_modules/**"
                        ],
                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                        "items": {
                          "type": "string"
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "runtimeSourcemapPausePatterns": {
                        "default": [],
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                        "type": "array"
                      },
                      "showAsyncStacks": {
                        "default": true,
                        "description": "Show the async calls that led to the current call stack.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "properties": {
                              "onAttach": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onAttach"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "onceBreakpointResolved": {
                                "default": 32,
                                "type": "number"
                              }
                            },
                            "required": [
                              "onceBreakpointResolved"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "skipFiles": {
                        "default": [
                          "${/**"
                        ],
                        "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                        "type": "array"
                      },
                      "smartStep": {
                        "default": true,
                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                        "type": "boolean"
                      },
                      "sourceMapPathOverrides": {
                        "default": {
                          "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                          "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                          "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                        },
                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                        "type": "object"
                      },
                      "sourceMapRenames": {
                        "default": true,
                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                        "type": "boolean"
                      },
                      "sourceMaps": {
                        "default": true,
                        "description": "Use JavaScript source maps (if they exist).",
                        "type": "boolean"
                      },
                      "timeout": {
                        "default": 10000,
                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                        "type": "number"
                      },
                      "timeouts": {
                        "additionalProperties": false,
                        "default": {},
                        "description": "Timeouts for several debugger operations.",
                        "markdownDescription": "Timeouts for several debugger operations.",
                        "properties": {
                          "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                          },
                          "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                          },
                          "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "trace": {
                        "default": true,
                        "description": "Configures what diagnostic output is produced.",
                        "oneOf": [
                          {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "logFile": {
                                "description": "Configures where on disk logs are written.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "stdio": {
                                "description": "Whether to return trace data from the launched application or browser.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "showAsyncStacks": {
                "default": true,
                "description": "Show the async calls that led to the current call stack.",
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "properties": {
                      "onAttach": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onAttach"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "onceBreakpointResolved": {
                        "default": 32,
                        "type": "number"
                      }
                    },
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "type": "object"
                  }
                ]
              },
              "skipFiles": {
                "default": [
                  "${/**"
                ],
                "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                "type": "array"
              },
              "smartStep": {
                "default": true,
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "type": "boolean"
              },
              "sourceMapPathOverrides": {
                "default": {
                  "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                  "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                  "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                },
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "type": "object"
              },
              "sourceMapRenames": {
                "default": true,
                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                "type": "boolean"
              },
              "sourceMaps": {
                "default": true,
                "description": "Use JavaScript source maps (if they exist).",
                "type": "boolean"
              },
              "targetSelection": {
                "default": "automatic",
                "enum": [
                  "pick",
                  "automatic"
                ],
                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                "type": "string"
              },
              "timeout": {
                "default": 10000,
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "type": "number"
              },
              "timeouts": {
                "additionalProperties": false,
                "default": {},
                "description": "Timeouts for several debugger operations.",
                "markdownDescription": "Timeouts for several debugger operations.",
                "properties": {
                  "hoverEvaluation": {
                    "default": 500,
                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                    "type": "number"
                  },
                  "sourceMapCumulativePause": {
                    "default": 1000,
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "type": "number"
                  },
                  "sourceMapMinPause": {
                    "default": 1000,
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "trace": {
                "default": true,
                "description": "Configures what diagnostic output is produced.",
                "oneOf": [
                  {
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "logFile": {
                        "description": "Configures where on disk logs are written.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "stdio": {
                        "description": "Whether to return trace data from the launched application or browser.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "url": {
                "default": "http://localhost:8080",
                "description": "Will search for a tab with this exact url and attach to it, if found",
                "tags": [
                  "setup"
                ],
                "type": "string"
              },
              "urlFilter": {
                "default": "",
                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                "type": "string"
              },
              "vueComponentPaths": {
                "default": [
                  "${ZED_WORKTREE_ROOT}/**/*.vue"
                ],
                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                "type": "array"
              },
              "webRoot": {
                "default": "${ZED_WORKTREE_ROOT}",
                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                "tags": [
                  "setup"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "resolveSourceMapLocations": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**",
              "!**/node_modules/**"
            ],
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeExecutable": {
            "default": "node",
            "markdownDescription": "Absolute path to VS Code.",
            "type": [
              "string",
              "null"
            ]
          },
          "runtimeSourcemapPausePatterns": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
            "type": "array"
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "testConfiguration": {
            "default": "${ZED_WORKTREE_ROOT}/.vscode-test.js",
            "markdownDescription": "Path to a test configuration file for the [test CLI](https://code.visualstudio.com/api/working-with-extensions/testing-extension#quick-setup-the-test-cli).",
            "type": "string"
          },
          "testConfigurationLabel": {
            "default": "",
            "markdownDescription": "A single configuration to run from the file. If not specified, you may be asked to pick.",
            "type": "string"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "required": []
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-chrome"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "browserLaunchLocation": {
            "default": null,
            "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "cleanUp": {
            "default": "wholeBrowser",
            "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
            "enum": [
              "wholeBrowser",
              "onlyTab"
            ],
            "type": "string"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": null,
            "description": "Optional working directory for the runtime executable.",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "default": {},
            "description": "Optional dictionary of environment key/value pairs for the browser.",
            "type": "object"
          },
          "file": {
            "default": "${ZED_WORKTREE_ROOT}/index.html",
            "description": "A local html file to open in the browser",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "includeDefaultArgs": {
            "default": true,
            "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
            "type": "boolean"
          },
          "includeLaunchArgs": {
            "default": true,
            "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "killBehavior": {
            "default": "forceful",
            "enum": [
              "forceful",
              "polite",
              "none"
            ],
            "markdownDescription": "Configures how browser processes are killed when stopping the session with `cleanUp: wholeBrowser`. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
            "type": "string"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 0,
            "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
            "type": "number"
          },
          "profileStartup": {
            "default": true,
            "description": "If true, will start profiling soon as the process launches",
            "type": "boolean"
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeArgs": {
            "default": [],
            "description": "Optional arguments passed to the runtime executable.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runtimeExecutable": {
            "default": "stable",
            "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
            "type": [
              "string",
              "null"
            ]
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "userDataDir": {
            "default": true,
            "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
            "type": [
              "string",
              "boolean"
            ]
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-chrome"
          },
          "request": {
            "const": "attach"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "IP address or hostname the debugged browser is listening on.",
            "type": "string"
          },
          "browserAttachLocation": {
            "default": null,
            "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 9229,
            "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ],
            "tags": [
              "setup"
            ]
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": false,
            "markdownDescription": "Whether to reconnect if the browser connection is closed",
            "type": "boolean"
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "targetSelection": {
            "default": "automatic",
            "enum": [
              "pick",
              "automatic"
            ],
            "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
            "type": "string"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "chrome"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "browserLaunchLocation": {
            "default": null,
            "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "cleanUp": {
            "default": "wholeBrowser",
            "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
            "enum": [
              "wholeBrowser",
              "onlyTab"
            ],
            "type": "string"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": null,
            "description": "Optional working directory for the runtime executable.",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "default": {},
            "description": "Optional dictionary of environment key/value pairs for the browser.",
            "type": "object"
          },
          "file": {
            "default": "${ZED_WORKTREE_ROOT}/index.html",
            "description": "A local html file to open in the browser",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "includeDefaultArgs": {
            "default": true,
            "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
            "type": "boolean"
          },
          "includeLaunchArgs": {
            "default": true,
            "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "killBehavior": {
            "default": "forceful",
            "enum": [
              "forceful",
              "polite",
              "none"
            ],
            "markdownDescription": "Configures how browser processes are killed when stopping the session with `cleanUp: wholeBrowser`. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
            "type": "string"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 0,
            "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
            "type": "number"
          },
          "profileStartup": {
            "default": true,
            "description": "If true, will start profiling soon as the process launches",
            "type": "boolean"
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeArgs": {
            "default": [],
            "description": "Optional arguments passed to the runtime executable.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runtimeExecutable": {
            "default": "stable",
            "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
            "type": [
              "string",
              "null"
            ]
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "userDataDir": {
            "default": true,
            "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
            "type": [
              "string",
              "boolean"
            ]
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "chrome"
          },
          "request": {
            "const": "attach"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "IP address or hostname the debugged browser is listening on.",
            "type": "string"
          },
          "browserAttachLocation": {
            "default": null,
            "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 9229,
            "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ],
            "tags": [
              "setup"
            ]
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": false,
            "markdownDescription": "Whether to reconnect if the browser connection is closed",
            "type": "boolean"
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "targetSelection": {
            "default": "automatic",
            "enum": [
              "pick",
              "automatic"
            ],
            "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
            "type": "string"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-msedge"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
            "type": "string"
          },
          "browserLaunchLocation": {
            "default": null,
            "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "cleanUp": {
            "default": "wholeBrowser",
            "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
            "enum": [
              "wholeBrowser",
              "onlyTab"
            ],
            "type": "string"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": null,
            "description": "Optional working directory for the runtime executable.",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "default": {},
            "description": "Optional dictionary of environment key/value pairs for the browser.",
            "type": "object"
          },
          "file": {
            "default": "${ZED_WORKTREE_ROOT}/index.html",
            "description": "A local html file to open in the browser",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "includeDefaultArgs": {
            "default": true,
            "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
            "type": "boolean"
          },
          "includeLaunchArgs": {
            "default": true,
            "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "killBehavior": {
            "default": "forceful",
            "enum": [
              "forceful",
              "polite",
              "none"
            ],
            "markdownDescription": "Configures how browser processes are killed when stopping the session with `cleanUp: wholeBrowser`. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
            "type": "string"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 9229,
            "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
            "type": "number"
          },
          "profileStartup": {
            "default": true,
            "description": "If true, will start profiling soon as the process launches",
            "type": "boolean"
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeArgs": {
            "default": [],
            "description": "Optional arguments passed to the runtime executable.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runtimeExecutable": {
            "default": "stable",
            "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
            "type": [
              "string",
              "null"
            ]
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "useWebView": {
            "default": false,
            "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
            "type": "boolean"
          },
          "userDataDir": {
            "default": true,
            "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
            "type": [
              "string",
              "boolean"
            ]
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "pwa-msedge"
          },
          "request": {
            "const": "attach"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "IP address or hostname the debugged browser is listening on.",
            "type": "string"
          },
          "browserAttachLocation": {
            "default": null,
            "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 9229,
            "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ],
            "tags": [
              "setup"
            ]
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": false,
            "markdownDescription": "Whether to reconnect if the browser connection is closed",
            "type": "boolean"
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "targetSelection": {
            "default": "automatic",
            "enum": [
              "pick",
              "automatic"
            ],
            "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
            "type": "string"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "useWebView": {
            "default": {
              "pipeName": "MyPipeName"
            },
            "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
            "properties": {
              "pipeName": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "msedge"
          },
          "request": {
            "const": "launch"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
            "type": "string"
          },
          "browserLaunchLocation": {
            "default": null,
            "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "cleanUp": {
            "default": "wholeBrowser",
            "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
            "enum": [
              "wholeBrowser",
              "onlyTab"
            ],
            "type": "string"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "cwd": {
            "default": null,
            "description": "Optional working directory for the runtime executable.",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "env": {
            "default": {},
            "description": "Optional dictionary of environment key/value pairs for the browser.",
            "type": "object"
          },
          "file": {
            "default": "${ZED_WORKTREE_ROOT}/index.html",
            "description": "A local html file to open in the browser",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "includeDefaultArgs": {
            "default": true,
            "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
            "type": "boolean"
          },
          "includeLaunchArgs": {
            "default": true,
            "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "killBehavior": {
            "default": "forceful",
            "enum": [
              "forceful",
              "polite",
              "none"
            ],
            "markdownDescription": "Configures how browser processes are killed when stopping the session with `cleanUp: wholeBrowser`. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
            "type": "string"
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 9229,
            "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
            "type": "number"
          },
          "profileStartup": {
            "default": true,
            "description": "If true, will start profiling soon as the process launches",
            "type": "boolean"
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "runtimeArgs": {
            "default": [],
            "description": "Optional arguments passed to the runtime executable.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runtimeExecutable": {
            "default": "stable",
            "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
            "type": [
              "string",
              "null"
            ]
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "useWebView": {
            "default": false,
            "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
            "type": "boolean"
          },
          "userDataDir": {
            "default": true,
            "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
            "type": [
              "string",
              "boolean"
            ]
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "msedge"
          },
          "request": {
            "const": "attach"
          }
        },
        "required": [
          "type",
          "request"
        ]
      },
      "then": {
        "properties": {
          "address": {
            "default": "localhost",
            "description": "IP address or hostname the debugged browser is listening on.",
            "type": "string"
          },
          "browserAttachLocation": {
            "default": null,
            "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "enum": [
                  "ui",
                  "workspace"
                ],
                "type": "string"
              }
            ]
          },
          "cascadeTerminateToConfigurations": {
            "default": [],
            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
            "items": {
              "type": "string",
              "uniqueItems": true
            },
            "type": "array"
          },
          "customDescriptionGenerator": {
            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
            "type": "string"
          },
          "customPropertiesGenerator": {
            "deprecated": true,
            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
            "type": "string"
          },
          "disableNetworkCache": {
            "default": true,
            "description": "Controls whether to skip the network cache for each request",
            "type": "boolean"
          },
          "enableContentValidation": {
            "default": true,
            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
            "type": "boolean"
          },
          "enableDWARF": {
            "default": true,
            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
            "type": "boolean"
          },
          "inspectUri": {
            "default": null,
            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "outFiles": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
              "!**/node_modules/**"
            ],
            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
            "items": {
              "type": "string"
            },
            "tags": [
              "setup"
            ],
            "type": [
              "array"
            ]
          },
          "outputCapture": {
            "default": "console",
            "enum": [
              "console",
              "std"
            ],
            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
          },
          "pathMapping": {
            "default": {},
            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
            "type": "object"
          },
          "pauseForSourceMap": {
            "default": false,
            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
            "type": "boolean"
          },
          "perScriptSourcemaps": {
            "default": "auto",
            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
            "enum": [
              "yes",
              "no",
              "auto"
            ],
            "type": "string"
          },
          "port": {
            "default": 9229,
            "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "pattern": "^\\${.*}$",
                "type": "string"
              }
            ],
            "tags": [
              "setup"
            ]
          },
          "resolveSourceMapLocations": {
            "default": null,
            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "restart": {
            "default": false,
            "markdownDescription": "Whether to reconnect if the browser connection is closed",
            "type": "boolean"
          },
          "server": {
            "oneOf": [
              {
                "additionalProperties": false,
                "default": {
                  "program": "node my-server.js"
                },
                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                "properties": {
                  "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array",
                      "string"
                    ]
                  },
                  "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "pattern": "^\\${.*}$",
                        "type": "string"
                      }
                    ]
                  },
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                      "internalConsole",
                      "integratedTerminal",
                      "externalTerminal"
                    ],
                    "enumDescriptions": [
                      "VS Code Debug Console (which doesn't support to read input from a program)",
                      "VS Code's integrated terminal",
                      "External terminal that can be configured via user settings"
                    ],
                    "type": "string"
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "experimentalNetworking": {
                    "default": "auto",
                    "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                    "enum": [
                      "auto",
                      "on",
                      "off"
                    ],
                    "type": "string"
                  },
                  "killBehavior": {
                    "default": "forceful",
                    "enum": [
                      "forceful",
                      "polite",
                      "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean"
                  },
                  "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "delay": {
                            "default": 1000,
                            "minimum": 0,
                            "type": "number"
                          },
                          "maxAttempts": {
                            "default": 10,
                            "minimum": 0,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": "array"
                  },
                  "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                      "boolean",
                      "string"
                    ]
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "default": {
                  "program": "npm start"
                },
                "description": "JavaScript Debug Terminal",
                "properties": {
                  "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean"
                  },
                  "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string"
                  },
                  "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string"
                  },
                  "cwd": {
                    "default": "${ZED_WORKTREE_ROOT}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "docDefault": "localRoot || ${ZED_WORKTREE_ROOT}",
                    "tags": [
                      "setup"
                    ],
                    "type": "string"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean"
                  },
                  "enableDWARF": {
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                    "type": "boolean"
                  },
                  "env": {
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "tags": [
                      "setup"
                    ],
                    "type": "object"
                  },
                  "envFile": {
                    "default": "${ZED_WORKTREE_ROOT}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string"
                  },
                  "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number"
                  },
                  "outFiles": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                      "type": "string"
                    },
                    "tags": [
                      "setup"
                    ],
                    "type": [
                      "array"
                    ]
                  },
                  "outputCapture": {
                    "default": "console",
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                  },
                  "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean"
                  },
                  "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "resolveSourceMapLocations": {
                    "default": [
                      "${ZED_WORKTREE_ROOT}/**",
                      "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array"
                  },
                  "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "properties": {
                          "onAttach": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onAttach"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "onceBreakpointResolved": {
                            "default": 32,
                            "type": "number"
                          }
                        },
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "skipFiles": {
                    "default": [
                      "${/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "type": "array"
                  },
                  "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean"
                  },
                  "sourceMapPathOverrides": {
                    "default": {
                      "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
                      "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
                      "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object"
                  },
                  "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean"
                  },
                  "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number"
                  },
                  "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                      "hoverEvaluation": {
                        "default": 500,
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "type": "number"
                      },
                      "sourceMapCumulativePause": {
                        "default": 1000,
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "type": "number"
                      },
                      "sourceMapMinPause": {
                        "default": 1000,
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                      {
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                        "type": "boolean"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "logFile": {
                            "description": "Configures where on disk logs are written.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "stdio": {
                            "description": "Whether to return trace data from the launched application or browser.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "showAsyncStacks": {
            "default": true,
            "description": "Show the async calls that led to the current call stack.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "properties": {
                  "onAttach": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onAttach"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "onceBreakpointResolved": {
                    "default": 32,
                    "type": "number"
                  }
                },
                "required": [
                  "onceBreakpointResolved"
                ],
                "type": "object"
              }
            ]
          },
          "skipFiles": {
            "default": [
              "${/**"
            ],
            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
            "type": "array"
          },
          "smartStep": {
            "default": true,
            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
            "type": "boolean"
          },
          "sourceMapPathOverrides": {
            "default": {
              "meteor://💻app/*": "${ZED_WORKTREE_ROOT}/*",
              "webpack:///./~/*": "${ZED_WORKTREE_ROOT}/node_modules/*",
              "webpack://?:*/*": "${ZED_WORKTREE_ROOT}/*"
            },
            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
            "type": "object"
          },
          "sourceMapRenames": {
            "default": true,
            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
            "type": "boolean"
          },
          "sourceMaps": {
            "default": true,
            "description": "Use JavaScript source maps (if they exist).",
            "type": "boolean"
          },
          "targetSelection": {
            "default": "automatic",
            "enum": [
              "pick",
              "automatic"
            ],
            "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
            "type": "string"
          },
          "timeout": {
            "default": 10000,
            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
            "type": "number"
          },
          "timeouts": {
            "additionalProperties": false,
            "default": {},
            "description": "Timeouts for several debugger operations.",
            "markdownDescription": "Timeouts for several debugger operations.",
            "properties": {
              "hoverEvaluation": {
                "default": 500,
                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                "type": "number"
              },
              "sourceMapCumulativePause": {
                "default": 1000,
                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                "type": "number"
              },
              "sourceMapMinPause": {
                "default": 1000,
                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                "type": "number"
              }
            },
            "type": "object"
          },
          "trace": {
            "default": true,
            "description": "Configures what diagnostic output is produced.",
            "oneOf": [
              {
                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                "type": "boolean"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "logFile": {
                    "description": "Configures where on disk logs are written.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "stdio": {
                    "description": "Whether to return trace data from the launched application or browser.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          "url": {
            "default": "http://localhost:8080",
            "description": "Will search for a tab with this exact url and attach to it, if found",
            "tags": [
              "setup"
            ],
            "type": "string"
          },
          "urlFilter": {
            "default": "",
            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
            "type": "string"
          },
          "useWebView": {
            "default": {
              "pipeName": "MyPipeName"
            },
            "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
            "properties": {
              "pipeName": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "vueComponentPaths": {
            "default": [
              "${ZED_WORKTREE_ROOT}/**/*.vue"
            ],
            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
            "type": "array"
          },
          "webRoot": {
            "default": "${ZED_WORKTREE_ROOT}",
            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
            "tags": [
              "setup"
            ],
            "type": "string"
          }
        }
      }
    },
    {
      "properties": {
        "type": {
          "enum": [
            "pwa-node",
            "node",
            "node-terminal",
            "pwa-extensionHost",
            "extensionHost",
            "pwa-chrome",
            "chrome",
            "pwa-msedge",
            "msedge"
          ]
        }
      },
      "required": [
        "type"
      ]
    }
  ]
}
